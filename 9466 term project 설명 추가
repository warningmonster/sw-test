#include <iostream>
int a[10001];
int visitedOrder[10001];
int startNode[10001];
int n;

// dfs 함수
// int x	: 노드 번호
// int cnt	: 출발지로 방문된 순서
// int step : 출발지 노드번호
int dfs(int x, int cnt, int step) {
	// i, 1, i
	// 방문했던 노드면
	if (visitedOrder[x] != 0) {
		// 출발지와 기존 출발지가 다르면 종료
		if (step != startNode[x]) {
			return 0;
		}
		// 출발지와 기존 출발지가 같으면 횟수 리턴
		printf("cnt=%d, visitedOrder[%d]=%d, ans=%d\n", cnt, x, visitedOrder[x], cnt-visitedOrder[x]);
		return cnt - visitedOrder[x];
	}
	// 방문했던 노드가 아니면
	// visitedOrder에 횟수 저장
	visitedOrder[x] = cnt;
	// startNode에 출발노드 저장
	startNode[x] = step;
	// cnt를 1 증가 시키고, dfs에 다음(next) 노드로 출발함
	return dfs(a[x], cnt + 1, step);
}

int main() {
	scanf("%d", &n);
	// 변수 초기화
	for (int i = 1; i <= n; i++) {
		scanf("%d", &a[i]);
		visitedOrder[i] = 0;
		startNode[i] = 0;
	}
	int ans = 0;
	// 1번 노드부터 N번째 노드까지 탐색
	for (int i = 1; i <= n; i++) {
		// 방문하지 않는 노드이면
		if (visitedOrder[i] == 0) {
			//dfs 함수 호출, cnt 1로 해서 다시 출발, step은 출발지로 셋팅
			ans = ans + dfs(i, 1, i);
		}
	}
	// 결과값 출력
	printf("%d\n", n - ans);

	return 0;
}
